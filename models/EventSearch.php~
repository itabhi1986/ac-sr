<?php

namespace frontend\models;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use common\models\Event;

/**
 * EventSearch represents the model behind the search form about `common\models\Event`.
 */
class EventSearch extends Event
{
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['event_id', 'post_id', 'event_owner', 'event_status', 'event_all_day', 'event_private', 'event_category_id', 'featured'], 'integer'],
            [['event_slug', 'event_name', 'event_start_time', 'event_end_time', 'event_start_date', 'event_end_date', 'event_content', 'event_attributes', 'event_date_created', 'event_date_modified'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Event::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        $query->andFilterWhere([
            'event_id' => $this->event_id,
            'post_id' => $this->post_id,
            'event_owner' => $this->event_owner,
            'event_status' => $this->event_status,
            'event_start_time' => $this->event_start_time,
            'event_end_time' => $this->event_end_time,
            'event_all_day' => $this->event_all_day,
            'event_start_date' => $this->event_start_date,
            'event_end_date' => $this->event_end_date,
            'event_private' => $this->event_private,
            'event_category_id' => $this->event_category_id,
            'event_date_created' => $this->event_date_created,
            'event_date_modified' => $this->event_date_modified,
            'featured' => $this->featured,
        ]);

        $query->andFilterWhere(['like', 'event_slug', $this->event_slug])
            ->andFilterWhere(['like', 'event_name', $this->event_name])
            ->andFilterWhere(['like', 'event_content', $this->event_content])
            ->andFilterWhere(['like', 'event_attributes', $this->event_attributes]);

        return $dataProvider;
    }
}
